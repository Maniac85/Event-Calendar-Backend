# Datenbank-Verbindungseinstellungen - diese Werte werden von Render-Umgebungsvariablen übernommen
# Die Platzhalter ${...} bedeuten, dass Spring diese Werte aus den System-Umgebungsvariablen liest
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

# Der Treiber für PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver

# Hibernate DDL-Auto Einstellung für Produktion
# - "update": Passt das Schema basierend auf deinen Entitäten an (fügt Spalten/Tabellen hinzu, löscht aber nichts)
# - "none": Hibernate nimmt keinerlei Änderungen am Schema vor. Du musst das Schema manuell verwalten (für sehr große Projekte/Teams).
# Für den Anfang ist "update" meist ausreichend und komfortabel.
spring.jpa.hibernate.ddl-auto=update

# Optional: SQL-Queries im Log deaktivieren, um die Logs sauber zu halten
spring.jpa.show-sql=false

# Optional: Setzt die Dialekt-Einstellung für PostgreSQL (oft nicht explizit nötig, aber kann helfen)
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Deaktiviert die "Open-in-View"-Funktionalität von Spring JPA.
# Für reine REST-APIs (ohne serverseitiges View-Rendering wie Thymeleaf) ist dies die empfohlene Einstellung,
# um Datenbankressourcen freizugeben, sobald die Transaktion abgeschlossen ist,
# und um klarere Transaktionsgrenzen zu erzwingen.
spring.jpa.open-in-view=false